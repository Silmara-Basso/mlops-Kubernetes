# Projeto 6 - Versionamento e Controle de Dados em Pipelines CI/CD com Github Actions e Kubernetes

# Abra o terminal ou prompt de comando, navegue até a pasta com os arquivos e execute o comando abaixo para criar um ambiente virtual:

conda create --name pipep6 python=3.12

# Ative o ambiente:

conda activate pipep6 (ou: source activate pipep6)

# Instale o pip e as dependências:

conda install pip
pip install -r requirements.txt 

# Instale o Docker Desktop.

# ATENÇÃO: Abra a janela do Docker Desktop e mantenha aberta para inicializar o motor de execução Docker.

# Instale o Kubectl na sua máquina host conforme instruções das aulas no capítulo anterior.

# Valide a instalação checando a versão com o comando:
kubectl version --client

# Enquanto não visualizar a versão do kubectl não adianta seguir em frente. Primeiro instale o Kubectl na máquina host.

# Instale o minikube na sua máquina host conforme instruções das aulas no capítulo anterior.

# Verifica a versão do Minikube instalada
minikube version

# Inicia o cluster Kubernetes local com Minikube (sempre que reiniciar o computador, tem que executar este comando)
minikube start

# Treine e salve a versão inicial do modelo
python treinamento/dsa_treina_modelo.py

# Construa a imagem Docker localmente após treinar o modelo
docker build -t dsa-p6-app:latest .

# Carregue a imagem Docker para o Minikube
minikube image load dsa-p6-app:latest

# Aplica o manifesto YAML para criar o deployment Kubernetes
kubectl apply -f k8s/deployment.yaml 

# Aplica o manifesto YAML para criar o serviço Kubernetes
kubectl apply -f k8s/service.yaml 

# Verifique os pods criados
kubectl get pods

# Acesse a app via web
minikube service dsa-p6-app-service

# Configure o Workflow do GitHub Actions conforme mostrado nas aulas.

# Instale o Git na sua máquina
https://git-scm.com/

# Abra OUTRO terminal ou prompt, navegue até a pasta com os arquivos e inicialize o repositório Git localmente com os comandos abaixo:

git config --global user.email "aluno@teste.com"
git config --global user.name "Aluno DSA"

git init
git add .
git commit -m "Versão inicial do Projeto DSA"

# Instale o Act na sua máquina para testar o GitHub Actions localmente
https://nektosact.com/installation/index.html

# Abra o terminal ou prompt, navegue até a pasta com os arquivos e execute um act push (similar a um git push):

act push
act push --container-architecture linux/amd64 (necessário para máquinas com processador Apple Silicon, Família M)

# Parabéns, seu Pipeline CI/CD foi criado e automatizado! Vamos testar:

# Faça uma alteração no script de treinamento ou altere os dados (nesse caso, dentro do script de treinamento).

# Execute os comandos abaixo para atualizar o repositório Git:

git add .
git commit -m "Versão 2 do projeto"

act push
act push --container-architecture linux/amd64 (necessário para máquinas com processador Apple Silicon, Família M)

# Execute os comandos abaixo para atualizar a imagem em tempo real no cluster Kubernetes:

# Carrega a nova imagem no Minikube
minikube image load dsa-p6-app:latest

# Atualiza o deployment no Kubernetes para usar a imagem nova
kubectl set image deployment/dsa-p6-app-deployment dsa-p6-app-container=dsa-p6-app:latest

# Esses passos acima devem ser executados sempre que houver mudança no código de treinamento do modelo e então o Pipeline CI/CD será executado.

# A partir daqui os passos são:

# 1- Modificar ou atualizar script de modelo, app ou dados.
# 2- Commit e envio das alterações (git add, git commit e git push ou act push).
# 3- Executar act push para testar localmente se o fluxo de CI/CD (treinamento, build da imagem Docker e validação Kubernetes) funciona corretamente.

# Depois de garantir que tudo funciona corretamente no ambiente local com o Act, ao fazer o push para o repositório remoto (no GitHub, por exemplo), o GitHub Actions executará automaticamente o mesmo fluxo para validar, treinar o modelo e gerar uma nova imagem Docker, deixando tudo pronto para o deploy.

# Use os comandos abaixo para desativar o ambiente virtual e remover o ambiente (opcional):

conda deactivate
conda remove --name pipep6 --all

